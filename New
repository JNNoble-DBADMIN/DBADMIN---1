pipeline {
  agent any

  tools {
    nodejs "NodeJS_18"
  }

  environment {
    APP_VERSION = '1.0.0'
    DEPLOY_ENV = 'production'
    AWS_REGION = 'us-east-1'               // ‚úÖ NEW
    S3_BUCKET = 'my-app-bucket-name'       // ‚úÖ NEW
  }

  stages {
    stage('Install') {
      steps {
        sh 'npm ci'
      }
    }

    stage('Lint') {
      steps {
        sh 'npm run lint || echo "Linting failed."'
      }
    }

    stage('Test') {
      steps {
        sh 'npm test'
      }
    }

    stage('Coverage Report') { // ‚úÖ NEW: Optional test coverage publishing
      steps {
        sh 'npm run coverage || echo "Coverage failed or not configured."'
        // Assuming coverage output is in coverage/lcov-report/
        publishHTML(target: [
          allowMissing: true,
          alwaysLinkToLastBuild: true,
          keepAll: true,
          reportDir: 'coverage/lcov-report',
          reportFiles: 'index.html',
          reportName: 'Coverage Report'
        ])
      }
    }

    stage('Build') {
      steps {
        echo "üèóÔ∏è  Building version ${APP_VERSION} for ${DEPLOY_ENV}"
        sh 'npm run build || echo "No build script found."'
      }
    }

    stage('Archive Artifacts') { // ‚úÖ NEW
      steps {
        archiveArtifacts artifacts: '**/build/**', allowEmptyArchive: true
      }
    }

    stage('Deploy to S3') { // ‚úÖ OPTIONAL: Requires AWS CLI credentials setup
      when {
        branch 'main'
      }
      steps {
        echo 'üöÄ Deploying to AWS S3...'
        sh """
          aws s3 sync ./build s3://${S3_BUCKET}/ --delete --region ${AWS_REGION}
        """
      }
    }
  }

  post {
    success {
      slackSend channel: '#ci', message: "‚úÖ Build passed on ${env.JOB_NAME} #${env.BUILD_NUMBER} (${DEPLOY_ENV} v${APP_VERSION})"
    }
    failure {
      slackSend channel: '#ci', message: "‚ùå Build failed on ${env.JOB_NAME} #${env.BUILD_NUMBER} (${DEPLOY_ENV} v${APP_VERSION})"
    }
    always {
      echo 'üì¶ Post-build cleanup complete.'
    }
  }
}
